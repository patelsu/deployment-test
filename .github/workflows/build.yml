# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:   
    branches: 
      - '**'    
  pull_request:    
  release:
    types: # This configuration does not affect the page_build event above
      - created
 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env: 
      PROD_RELEASE: ${{ contains(github.ref, 'PROD') }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: "debug step"
      shell: bash
      env:
        EVENT: ${{ toJSON(github.event) }}
        PROD:  ${{ env.PROD_RELEASE == 'false' }}
        PROD1: ${{ env.PROD_RELEASE == 'true' }}
      run: |
        echo ${{ github.ref }}
        echo $EVENT
        echo "$PROD  $PROD1 "
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
    - name: Get app version
      if: env.PROD_RELEASE  == 'false'
      id: getversion
      shell: bash
      env:
        EVENT_NAME: ${{ github.event_name }}
      run: |
        echo "PROD release ${{ env.PROD_RELEASE }}" 
        sh ./getbuildversion.sh

    - name: "Check version"
      if: env.PROD_RELEASE  == 'false'
      id: checkversion
      shell: bash
      env:
        BUILD_VERSION: ${{ steps.getversion.outputs.BUILD_VERSION }}
      run: sh ./checkversion.sh develop-$BUILD_VERSION

    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - name: Build project
      run:  mvn clean package
   
    - name: Deploy Test
      if: env.PROD_RELEASE  == 'false'
      env:
        CLOUDHUB_ENVIRONMENT : Sandbox
        WORKERTYPE: MICRO
        WORKERS : 1
        SKIPVERIFICATION: true
        CLOUDHUB_USERNAME: ${{secrets.CLOUDHUB_USERNAME}}
        CLOUDHUB_GROUPID: ${{secrets.CLOUDHUB_ORG}}
        CLOUDHUB_PASSWORD: ${{secrets.CLOUDHUB_PASSWORD}}
        APPEXTENSION: sandbox1
      shell: bash
      run: |
        mvn package deploy -DmuleDeploy -Dusername=$CLOUDHUB_USERNAME -Dpassword=$CLOUDHUB_PASSWORD -Denvironment=$CLOUDHUB_ENVIRONMENT -DbusinessGroupId=$CLOUDHUB_GROUPID -DworkerType=$WORKERTYPE -Dwokers=$WORKERS -DskipVerification=$SKIPVERIFICATION -Dappextension=$APPEXTENSION
        ls -al
        echo `pwd`
   
    - name: "Tag Release"
      shell: bash
      if: contains(github.ref, 'master') && (env.PROD_RELEASE  == 'false')
      env:
        BUILD_VERSION: ${{ steps.getversion.outputs.BUILD_VERSION }}
      run: |
        echo "develop-$BUILD_VERSION"
        TAG="develop-$BUILD_VERSION"
        git tag "$TAG" 
        git push origin "$TAG"

    - name: "deploy prod"
      if:  env.PROD_RELEASE
      shell: bash
      run: echo "deploy to prod"

    - uses: actions/upload-artifact@v2-preview
      env:
        BUILD_VERSION: ${{ steps.getversion.outputs.BUILD_VERSION }}
      with:
        name: deployment-$BUILDVERSION
        path: 'target/*.jar'

   
